/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');


/**
 * Media API for the Kurento Web SDK
 *
 * @module core/abstracts
 *
 * @copyright 2013-2014 Kurento (http://kurento.org/)
 * @license LGPL
 */

var MediaObject = require('./MediaObject');


/**
 * A {@link MediaPad} is an elementÂ´s interface with the outside world. The data streams flow from the {@link MediaSource} pad to another element's {@link MediaSink} pad.
 *
 * @abstract
 * @class module:core/abstracts.MediaPad
 * @extends module:core/abstracts.MediaObject
 */

/**
 * @constructor
 *
 * @param {string} id
 */
function MediaPad(id){
  MediaObject.call(this, id);
};
inherits(MediaPad, MediaObject);


/**
 * The description for this pad.
 *
 * @param {module:core/abstracts.MediaPad~getMediaDescriptionCallback} [callback]
 *
 * @return {external:Promise}
 */
MediaPad.prototype.getMediaDescription = function(callback){
  return this.invoke('getMediaDescription', callback);
};
/**
 * @callback module:core/abstracts.MediaPad~getMediaDescriptionCallback
 * @param {Error} error
 * @param {String} result
 */

/**
 * The {@link MediaElement} that encloses this pad
 *
 * @param {module:core/abstracts.MediaPad~getMediaElementCallback} [callback]
 *
 * @return {external:Promise}
 */
MediaPad.prototype.getMediaElement = function(callback){
  return this.invoke('getMediaElement', callback);
};
/**
 * @callback module:core/abstracts.MediaPad~getMediaElementCallback
 * @param {Error} error
 * @param {MediaElement} result
 */

/**
 * Media that this pad accepts. One of {@link #MediaType.AUDIO}, {@link #MediaType.DATA} or {@link #MediaType.VIDEO}
 *
 * @param {module:core/abstracts.MediaPad~getMediaTypeCallback} [callback]
 *
 * @return {external:Promise}
 */
MediaPad.prototype.getMediaType = function(callback){
  return this.invoke('getMediaType', callback);
};
/**
 * @callback module:core/abstracts.MediaPad~getMediaTypeCallback
 * @param {Error} error
 * @param {MediaType} result
 */


/**
 * @type module:core/abstracts.MediaPad.constructorParams
 */
MediaPad.constructorParams = {};

/**
 * @type module:core/abstracts.MediaPad.events
 *
 * @extend module:core/abstracts.MediaObject.events
 */
MediaPad.events = [];
MediaPad.events.concat(MediaObject.events);


module.exports = MediaPad;


MediaPad.check = function(key, value)
{
  if(!(value instanceof MediaPad))
    throw SyntaxError(key+' param should be a MediaPad, not '+typeof value);
};
