/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var checkType = require('kurento-client').checkType;

/**
 * Checker for {@link core/complexTypes.RTCMediaStreamTrackStats}
 *
 * @memberof module:core/complexTypes
 *
 * @param {external:String} key
 * @param {module:core/complexTypes.RTCMediaStreamTrackStats} value
 */
function checkRTCMediaStreamTrackStats(key, value)
{
  checkType('String', key+'.trackIdentifier', value.trackIdentifier, true);
  checkType('boolean', key+'.remoteSource', value.remoteSource, true);
  checkType('String', key+'.ssrcIds', value.ssrcIds, true);
  checkType('int', key+'.frameWidth', value.frameWidth, true);
  checkType('int', key+'.frameHeight', value.frameHeight, true);
  checkType('float', key+'.framesPerSecond', value.framesPerSecond, true);
  checkType('int', key+'.framesSent', value.framesSent, true);
  checkType('int', key+'.framesReceived', value.framesReceived, true);
  checkType('int', key+'.framesDecoded', value.framesDecoded, true);
  checkType('int', key+'.framesDropped', value.framesDropped, true);
  checkType('int', key+'.framesCorrupted', value.framesCorrupted, true);
  checkType('float', key+'.audioLevel', value.audioLevel, true);
  checkType('float', key+'.echoReturnLoss', value.echoReturnLoss, true);
  checkType('float', key+'.echoReturnLossEnhancement', value.echoReturnLossEnhancement, true);
};


/**
 * Statistics related to the media stream.
 *
 * @memberof module:core/complexTypes
 *
 * @typedef core/complexTypes.RTCMediaStreamTrackStats
 *
 * @type {Object}
 * @property {external:String} trackIdentifier
 *  Represents the track.id property.
 * @property {external:Boolean} remoteSource
 *  true indicates that this is a remote source. false in other case.
 * @property {external:String} ssrcIds
 *  Synchronized sources.
 * @property {external:Integer} frameWidth
 *  Only makes sense for video media streams and represents the width of the video frame for this SSRC.
 * @property {external:Integer} frameHeight
 *  Only makes sense for video media streams and represents the height of the video frame for this SSRC.
 * @property {external:Number} framesPerSecond
 *  Only valid for video. It represents the nominal FPS value.
 * @property {external:Integer} framesSent
 *  Only valid for video. It represents the total number of frames sent for this SSRC.
 * @property {external:Integer} framesReceived
 *  Only valid for video and when remoteSource is set to true. It represents the total number of frames received for this SSRC.
 * @property {external:Integer} framesDecoded
 *  Only valid for video. It represents the total number of frames correctly decoded for this SSRC. 
 * @property {external:Integer} framesDropped
 *  Only valid for video. The total number of frames dropped predecode or dropped because the frame missed its display deadline.
 * @property {external:Integer} framesCorrupted
 *  Only valid for video. The total number of corrupted frames that have been detected.
 * @property {external:Number} audioLevel
 *  Only valid for audio, and the value is between 0..1 (linear), where 1.0 represents 0 dBov.
 * @property {external:Number} echoReturnLoss
 *  Only present on audio tracks sourced from a microphone where echo cancellation is applied. Calculated in decibels.
 * @property {external:Number} echoReturnLossEnhancement
 *  Only present on audio tracks sourced from a microphone where echo cancellation is applied.
 */


module.exports = checkRTCMediaStreamTrackStats;
