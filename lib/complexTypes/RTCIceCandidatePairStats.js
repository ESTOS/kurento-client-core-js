/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var checkType = require('kurento-client').checkType;

/**
 * Checker for {@link core/complexTypes.RTCIceCandidatePairStats}
 *
 * @memberof module:core/complexTypes
 *
 * @param {external:String} key
 * @param {module:core/complexTypes.RTCIceCandidatePairStats} value
 */
function checkRTCIceCandidatePairStats(key, value)
{
  checkType('String', key+'.transportId', value.transportId, true);
  checkType('String', key+'.localCandidateId', value.localCandidateId, true);
  checkType('String', key+'.remoteCandidateId', value.remoteCandidateId, true);
  checkType('RTCStatsIceCandidatePairState', key+'.state', value.state, true);
  checkType('int', key+'.priority', value.priority, true);
  checkType('boolean', key+'.nominated', value.nominated, true);
  checkType('boolean', key+'.writable', value.writable, true);
  checkType('boolean', key+'.readable', value.readable, true);
  checkType('int', key+'.bytesSent', value.bytesSent, true);
  checkType('int', key+'.bytesReceived', value.bytesReceived, true);
  checkType('float', key+'.roundTripTime', value.roundTripTime, true);
  checkType('float', key+'.availableOutgoingBitrate', value.availableOutgoingBitrate, true);
  checkType('float', key+'.availableIncomingBitrate', value.availableIncomingBitrate, true);
};


/**
 * 
 *
 * @memberof module:core/complexTypes
 *
 * @typedef core/complexTypes.RTCIceCandidatePairStats
 *
 * @type {Object}
 * @property {external:String} transportId
 *  It is a unique identifier that is associated to the object that was inspected to produce the RTCTransportStats associated with this candidate pair.
 * @property {external:String} localCandidateId
 *  It is a unique identifier that is associated to the object that was inspected to produce the RTCIceCandidateAttributes for the local candidate associated with this candidate pair.
 * @property {external:String} remoteCandidateId
 *  It is a unique identifier that is associated to the object that was inspected to produce the RTCIceCandidateAttributes for the remote candidate associated with this candidate pair.
 * @property {module:core/complexTypes.RTCStatsIceCandidatePairState} state
 *  Represents the state of the checklist for the local and remote candidates in a pair.
 * @property {external:Integer} priority
 *  Calculated from candidate priorities as defined in [RFC5245] section 5.7.2.
 * @property {external:Boolean} nominated
 *  Related to updating the nominated flag described in Section 7.1.3.2.4 of [RFC5245].
 * @property {external:Boolean} writable
 *  Has gotten ACK to an ICE request.
 * @property {external:Boolean} readable
 *  Has gotten a valid incoming ICE request.
 * @property {external:Integer} bytesSent
 *  Represents the total number of payload bytes sent on this candidate pair, i.e., not including headers or padding.
 * @property {external:Integer} bytesReceived
 *  Represents the total number of payload bytes received on this candidate pair, i.e., not including headers or padding.
 * @property {external:Number} roundTripTime
 *  Represents the RTT computed by the STUN connectivity checks
 * @property {external:Number} availableOutgoingBitrate
 *  Measured in Bits per second, and is implementation dependent. It may be calculated by the underlying congestion control.
 * @property {external:Number} availableIncomingBitrate
 *  Measured in Bits per second, and is implementation dependent. It may be calculated by the underlying congestion control.
 */


module.exports = checkRTCIceCandidatePairStats;
